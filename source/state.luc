module state (
    input clk,  // clock
    input rst,  // reset
    input leftBtn,
    input centBtn,
    input rightBtn,
    output row1,
    output row2,
    output row3,
    output gnd1,
    output gnd2,
    output gnd3,
    output totalScore[8],
    output result[2]
  //  output test[8]
    

    //output //led matrix
   // output totalScore//score

  ) {

  .clk(clk) {
    .rst(rst) {

    fsm state(#INIT(HALT)) = {MAIN,SUMUP,HALT}; // MAIN = random + propagate + compare the button and the result, sumup = add to score, halt = pause game
      bcounter bttnpress;
      reg8bit scoreSum; //use an 8bit register to store the toal score of the game // i cannot use dff becuase it mojo clk constantly resets it //try connecting register to the propagtor clock cycle
  //  multi_seven_seg seg;
      
    }
    main mainState;
    
  }
  alu myalu;
  
//  bintoAscii translater;
  sig rowResult[2]; //what is the score of each round?
 // sig score[8];     //score of the user throughout the game
  sig highscore[8]; //current High Score
//  sig scoreSum[8]; //what is my culmulative score?
//  sig out[8];   
      
  always {
  //  rowResult=2b00; //rowResult is assumed to be 0 unless specified other
    
    
    mainState.rst = rst;
    totalScore = scoreSum.out;
    scoreSum.data = 8b0; //am i always re-setting my register???????
    scoreSum.en=0;
    
    result = mainState.result;
    //setting up inpts of main state and button press
    mainState.left2 = leftBtn;
    mainState.right0 = rightBtn;
    mainState.center1 = centBtn;
    bttnpress.button = leftBtn;
    bttnpress.button2 = centBtn;
    bttnpress.button3 = rightBtn;
   
    //setting up alu
    myalu.a=0;
    myalu.b=0;
    myalu.alufn=0;
 //   myalu.clk = 
    
    //instantiating outputs of state
    row1=0;
    row2=0;
    row3=0;
    gnd1=1;
    gnd2=1;
    gnd3=1; //put ground to high to deactivate the columns
   // totalScore = bttnpress.bttnPress;// this for debugging to test start game on any button press
    case (state.q){
    
      state.MAIN:
        //in the main state the LEDs are controlled by the main state;
        
         gnd1 = mainState.low1;
         gnd2 = mainState.low2;
         gnd3 = mainState.low3;
    
         row1 = mainState.high1;
         row2 = mainState.high2;
         row3 = mainState.high3;
        
        scoreSum.en=0; //dont write into my register
        
       
        

        
        //**********THIS IS THE CODE FOR IF YOU MISS EVERYTHING & GAME OVER(LIKE UR LIFE U KUMQUAT)
        /*
        if (mainState.result==2b00 && mainState.rowOn==RowNumb.ROW3){
              state.d = state.HALT;
          }
        */
        //*************************************************
        
        if (mainState.result!=0 && mainState.rowOn==RowNumb.ROW3){
            //TRY row 3 (halt state very weird) and row 4
            state.d = state.SUMUP;
        }
        else {
            state.d = state.MAIN; //if i miss everything // change to HALT later on
          }
        
        state.SUMUP:
      //add score of this round to the score of your game
        myalu.alufn = Inst.ADD;
        myalu.a= mainState.result; //this is provided the mainstate clock has stopped
        myalu.b= scoreSum.out; //user's total score so far
        scoreSum.data = myalu.alu; //cnt new score into register input
        scoreSum.en =1;
        state.d = state.MAIN; //*****TO DEBUG: GO TO HALT *****//
        
        //write enable the register so you can store the new score
      //  state.d = state.MAIN;
        
        //this code converts the score to something that can be outputted in seven seg LED
        /*
        seg.values[3]=11;
        result = out[0]+out[1]*2+out[2]*4+out[3]*8+out[4]*16+out[5]*32+out[6]*64+out[7]*128;
        translater.num = result;
        seg.values[2]=translater.ascii[2];
        seg.values[1]=translater.ascii[1];
        seg.values[0]=translater.ascii[0];
        score = out;
        state.d = state.MAIN;
           */

      state.HALT:
      /*
        myalu.alufn =6b110111;
        myalu.a = score;
        myalu.b = highscore;
        out = myalu.alu;
        z=myalu.z;
        v=myalu.v;
        n=myalu.n;
        //if at any point result of the main is >0, then halt the lil fucker
        if (out != 8b1){ highscore = score;}
        result = highscore[0]+highscore[1]*2+highscore[2]*4+highscore[3]*8+highscore[4]*16+highscore[5]*32+highscore[6]*64+highscore[7]*128;
        seg.values[3]=10;
        translater.num = result;
        seg.values[2]=translater.ascii[2];
        seg.values[1]=translater.ascii[1];
        seg.values[0]=translater.ascii[0];
        */
        //in the halt state all my lights are off
    row1=0;
    row2=0;
    row3=0;
    gnd1=0;
    gnd2=0;
    gnd3=0;
        //scoreSum.data=scoreSum.out;
        scoreSum.en=0; //dont write into my register
        if (bttnpress.bttnPress==1) { 
           mainState.rst=1;
          //if i detect a button press i go to main state and start the game
          //mainState.rst=1; //reset my main sate before i re start the game //****DOESNT REALLY WORK***//
          state.d = state.MAIN;
          }

  }

  }
}